import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('ecg_autoencoder_dataset.csv',header=None)
df.head()

df.shape

df.info()

df.describe()

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
df=sc.fit_transform(df)
df

from sklearn.model_selection import train_test_split

import tensorflow as tf

x_train,x_test=train_test_split(df,test_size=0.2)

from tensorflow.keras.layers import Dense,Input
from tensorflow.keras.models import Sequential

encoder=Sequential([
  Input(shape=(x_train.shape[1],)),
  Dense(32,activation='relu'),
  Dense(16,activation='relu'),
  Dense(8,activation='relu')
])
decoder=Sequential([
    Input(shape=(8,)),
    Dense(16,activation='relu'),
    Dense(32,activation='relu'),
    Dense(x_train.shape[1],activation='linear')
])
model=Sequential([
    encoder,
    decoder
])

model.summary()

model.compile(optimizer='adam',loss=['mse'])

model.fit(x_train,x_train,validation_data=(x_test,x_test),epochs=10)
h = model.fit(x_train, x_train, epochs = 10, batch_size=512, validation_data=(x_test, x_test))

pred=model.predict(x_test)
mse=np.mean(np.power(pred-x_test,2),axis=1)
thresh=np.percentile(mse,95)
print(thresh)
OR
pred=model.predict(x_test)
mse=np.mean(np.power(pred-x_test,2),axis=1)
thresh=np.percentile(mse,95)
anomalies = mse > thresh
print(f'Anomalies detected: {np.sum(anomalies)}')


plt.plot(h.history['loss'],label='loss',color='orange')
plt.plot(h.history['val_loss'],label='val_loss')
plt.ylabel('MSLE Loss')
plt.xlabel('epochs')
plt.legend()
OR
plt.hist(mse, bins=50, alpha=0.75)
plt.axvline(thresh, color='r', linestyle='--')
plt.title('Reconstruction Error (MSE) for Anomaly Detection')
plt.xlabel('MSE')
plt.ylabel('Frequency')
plt.show()





x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.2, stratify=target)

train_index = y_train[y_train == 1].index
train_data = x_train.loc[train_index]

min_max_scaler = MinMaxScaler(feature_range=(0,1))
x_train_scaled = min_max_scaler.fit_transform(train_data.copy())
x_test_scaled = min_max_scaler.transform(x_test.copy())

def find_threshold(model, x_train_scaled):
    reconstruction = model.predict(x_train_scaled)
    reconstruction_errors = tf.keras.losses.msle(reconstruction, x_train_scaled)
    threshold = np.mean(reconstruction_errors.numpy()) \
    + np.std(reconstruction_errors.numpy())
    return threshold

def get_predictions(model, x_test_scaled, threshold):
    predictions = model.predict(x_test_scaled)
    errors = tf.keras.losses.msle(predictions, x_test_scaled)
    anamoly_mask = pd.Series(errors)>threshold
    preds = anamoly_mask.map(lambda x:0.0 if x == True else 1.0)
    return preds

threshold = find_threshold(model, x_train_scaled)
print(threshold)

prediction = get_predictions(model, x_test_scaled, threshold)
accuracy_score(prediction, y_test)
